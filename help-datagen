(p3-t2t-gpu-fork)machacek@titan-gpu:/net/work/people/machacek/t2t-second$ t2t-datagen --help
usage: t2t-datagen [-h] [--timit_paths TIMIT_PATHS]
                   [--parsing_path PARSING_PATH] [--data_dir DATA_DIR]
                   [--tmp_dir TMP_DIR] [--problem PROBLEM]
                   [--exclude_problems EXCLUDE_PROBLEMS]
                   [--num_shards NUM_SHARDS] [--max_cases MAX_CASES]
                   [--only_list [ONLY_LIST]] [--noonly_list]
                   [--random_seed RANDOM_SEED] [--task_id TASK_ID]
                   [--t2t_usr_dir T2T_USR_DIR]

optional arguments:
  -h, --help            show this help message and exit
  --timit_paths TIMIT_PATHS
                        Comma-separated list of tarfiles containing TIMIT
                        datasets
  --parsing_path PARSING_PATH
                        Path to parsing files in tmp_dir.
  --data_dir DATA_DIR   Data directory.
  --tmp_dir TMP_DIR     Temporary storage directory.
  --problem PROBLEM     The name of the problem to generate data for.
  --exclude_problems EXCLUDE_PROBLEMS
                        Comma-separates list of problems to exclude.
  --num_shards NUM_SHARDS
                        How many shards to use. Ignored for registered
                        Problems.
  --max_cases MAX_CASES
                        Maximum number of cases to generate (unbounded if 0).
  --only_list [ONLY_LIST]
                        If true, we only list the problems that will be
                        generated.
  --noonly_list
  --random_seed RANDOM_SEED
                        Random seed to use.
  --task_id TASK_ID     For distributed data generation.
  --t2t_usr_dir T2T_USR_DIR
                        Path to a Python module that will be imported. The
                        __init__.py file should include the necessary imports.
                        The imported files should contain registrations, e.g.
                        @registry.register_problem calls, that will then be
                        available to t2t-datagen.
